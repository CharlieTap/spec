;;
;; Mixfix variant cases
;;

syntax testmixfix = | `{ nat* } | `[ nat* ] | nat -> nat

def $testmixfix(testmixfix) : nat*
def $testmixfix(`{nat*}) = nat*
def $testmixfix(`[nat*]) = nat*
def $testmixfix(nat_1 -> nat_2) = nat_1 nat_2


;;
;; Empty iterations
;;

syntax opt = O?
syntax list = L*

syntax variant =
  | V1 opt nat
  | V2 O? nat
  | V3 text? nat
  | V4 list nat
  | V5 L* nat
  | V6 text* nat

syntax notation1 = opt nat
syntax notation2 = O? nat
syntax notation3 = text? nat
syntax notation4 = list nat
syntax notation5 = L* nat
syntax notation6 = text* nat

def $testemptyv1(variant) : nat
def $testemptyv1(V1 opt 0) = 0
def $testemptyv1(V1 eps 0) = 0
def $testemptyv1(V1 0) = 0
def $testemptyv1(V1 O 0) = 0

def $testemptyv2(variant) : nat
def $testemptyv2(V2 eps 0) = 0
def $testemptyv2(V2 0) = 0
def $testemptyv2(V2 O 0) = 0

def $testemptyv3(variant) : nat
def $testemptyv3(V3 eps 0) = 0
def $testemptyv3(V3 0) = 0
def $testemptyv3(V3 "" 0) = 0

def $testemptyv4(variant) : nat
def $testemptyv4(V4 list 0) = 0
def $testemptyv4(V4 eps 0) = 0
def $testemptyv4(V4 0) = 0
def $testemptyv4(V4 L 0) = 0
def $testemptyv4(V4 L L L 0) = 0
def $testemptyv4(V4 ([]) 0) = 0
def $testemptyv4(V4 ([L]) 0) = 0
def $testemptyv4(V4 ([L L L]) 0) = 0

def $testemptyv5(variant) : nat
def $testemptyv5(V5 eps 0) = 0
def $testemptyv5(V5 0) = 0
def $testemptyv5(V5 L 0) = 0
def $testemptyv5(V5 L L L 0) = 0
def $testemptyv5(V5 ([]) 0) = 0
def $testemptyv5(V5 ([L]) 0) = 0
def $testemptyv5(V5 ([L L L]) 0) = 0

def $testemptyv6(variant) : nat
def $testemptyv6(V6 eps 0) = 0
def $testemptyv6(V6 0) = 0
def $testemptyv6(V6 "" 0) = 0
def $testemptyv6(V6 "" "" 0) = 0
def $testemptyv6(V6 ([]) 0) = 0
def $testemptyv6(V6 ([""]) 0) = 0
def $testemptyv6(V6 (["" ""]) 0) = 0

def $testemptyn1(notation1) : nat
def $testemptyn1(opt 0) = 0
def $testemptyn1(eps 0) = 0
def $testemptyn1(0) = 0
def $testemptyn1(O 0) = 0

def $testemptyn2(notation2) : nat
def $testemptyn2(eps 0) = 0
def $testemptyn2(0) = 0
def $testemptyn2(O 0) = 0

def $testemptyn3(notation3) : nat
def $testemptyn3(eps 0) = 0
def $testemptyn3(0) = 0
def $testemptyn3("" 0) = 0

def $testemptyn4(notation4) : nat
def $testemptyn4(list 0) = 0
def $testemptyn4(eps 0) = 0
def $testemptyn4(0) = 0
def $testemptyn4(L 0) = 0
def $testemptyn4(L L L 0) = 0
def $testemptyn4(([]) 0) = 0
def $testemptyn4(([L]) 0) = 0
def $testemptyn4(([L L L]) 0) = 0

def $testemptyn5(notation5) : nat
def $testemptyn5(eps 0) = 0
def $testemptyn5(0) = 0
def $testemptyn5(L 0) = 0
def $testemptyn5(L L L 0) = 0
def $testemptyn5(([]) 0) = 0
def $testemptyn5(([L]) 0) = 0
def $testemptyn5(([L L L]) 0) = 0

def $testemptyn6(notation6) : nat
def $testemptyn6(eps 0) = 0
def $testemptyn6(0) = 0
def $testemptyn6("" 0) = 0
def $testemptyn6("" "" "" 0) = 0
def $testemptyn6(([]) 0) = 0
def $testemptyn6(([""]) 0) = 0
def $testemptyn6((["" "" ""]) 0) = 0



;;
;; Parameterisation
;;

def $f(syntax X, X) : X
def $f(syntax X, x) = x

def $g(def $h(syntax X, X) : X, syntax Y, Y) : Y
def $g(def $h, syntax Y, y) = $h(Y, y)

def $x : nat
def $x = $($g(def $f, syntax nat, 1) + $g($f, nat, 2))



;;
;; Plus/minus
;;

var n : nat

def $pmpm(int) : int
def $pmpm(+-n) = +-n

def $pmmp(int) : int
def $pmmp(+-n) = -+n

def $mppm(int) : int
def $mppm(-+n) = +-n

def $mpmp(int) : int
def $mpmp(-+n) = -+n

def $a1 : int
def $a1 = $($pmpm(+3) + $pmpm(-4))

def $a2 : int
def $a2 = $($pmmp(+3) + $pmmp(-4))

def $a3 : int
def $a3 = $($mppm(+3) + $mppm(-4))

def $a4 : int
def $a4 = $($mpmp(+3) + $mpmp(-4))





def $signed_(nat, nat) : int
def $invsigned_(nat, nat) : int
def $int(int) : int
def $irem_(nat, nat, nat) : nat
def $irem_(n, i_1, i_2) = $invsigned_(n, $(j_1 - j_2 * $int($(j_1 / j_2))))
  -- if j_1 = $signed_(n, i_1)
  -- if j_2 = $signed_(n, i_2)


(;
-def $ivadd_pairwise_{N : N, `i*` : iN(N)*, `j_1*` : iN(N)*, `j_2*` : iN(N)*}(N, i*{i <- `i*`}) = $iadd_(N, j_1, j_2)*{j_1 <- `j_1*`, j_2 <- `j_2*`}
-  -- if ($concat_(syntax N, [j_1!`%`_iN.0 j_2!`%`_iN.0]*{j_1 <- `j_1*`, j_2 <- `j_2*`}) = i!`%`_iN.0*{i <- `i*`})

+def $ivadd_pairwise_{N : N, `i*` : iN(N)*, `j_1*` : N*, `j_2*` : N*}(N, i*{i <- `i*`}) = $iadd_(N, `%`_iN(j_1), `%`_iN(j_2))*{j_1 <- `j_1*`, j_2 <- `j_2*`}
+  -- if ($concat_(syntax N, [j_1 j_2]*{j_1 <- `j_1*`, j_2 <- `j_2*`}) = i!`%`_iN.0*{i <- `i*`})
;)
