;;
;; Lexical syntax
;;

;; Source

;; TODO(4, rossberg): enable short form
grammar Tcharplain hint(show Tchar) =
  | U+0000 | ... | U+D7FF | U+E000 | ... | U+10FFFF

grammar Tchar : char =
  | c:U+0000 | ... | c:U+D7FF => c | c:U+E000 | ... | c:U+10FFFF => c

grammar Tsource =
  | Tchar*


;; Tokens

grammar TuNplain hint(show TuN) = eps  ;; HACK
grammar TsNplain hint(show TsN) = eps  ;; HACK
grammar TfNplain hint(show TfN) = eps  ;; HACK

grammar Ttoken =
  | Tkeyword | TuNplain | TsNplain | TfNplain | Tstring | Tid | "(" | ")" | Treserved

grammar Tkeyword =
  | ("a" | ... | "z") Tidchar*

grammar Treserved =
  | (Tidchar | Tstring | "," | ";" | "[" | "]" | "{" | "}")+


;; White Space

grammar Tspace =
  | (" " | Tformat | Tcomment | Tannot)*

grammar Tformat =
  | Tnewline | U+09

grammar Tnewline =
  | U+0A | U+0D | U+0D U+0A


;; Comments

grammar Tcomment =
  | Tlinecomment | Tblockcomment


grammar Tlinecomment =
  | ";;" Tlinechar* (Tnewline | Teof)

grammar Teof = ""  ;; dummy

grammar Tlinechar =
  | c:Tchar  -- if c =/= U+0A /\ c =/= U+0D

grammar Tblockcomment =
  | "(;" Tblockchar* ";)"


grammar Tblockchar =
  | c:Tchar       -- if c =/= ";" /\ c =/= "("
  | ";"+ c:Tchar  -- if c =/= ";" /\ c =/= ")"
  | "("+ c:Tchar  -- if c =/= ";" /\ c =/= "("
  | Tblockcomment


;; Annotations

grammar Tannot =
  | "(@" Tannotid (Tspace | Ttoken)* ")"

grammar Tannotid =
  | Tidchar+ | Tname
