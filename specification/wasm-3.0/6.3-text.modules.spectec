;;
;; Text Format of Modules
;;

;; Types

grammar Ttype_(I) : (type, idctxt) =
  | (qt,I'):Trectype_(I) => (TYPE qt, I')


;; Tags

grammar Ttag_(I) : (tag, idctxt) =
  | "(" "tag" id?:Tid? jt:Ttagtype_(I) ")" => (TAG jt, {TAGS (id?)})


;; Globals

grammar Tglobal_(I) : (global, idctxt) =
  | "(" "global" id?:Tid? gt:Tglobaltype_(I) e:Texpr_(I) ")" => (GLOBAL gt e, {GLOBALS (id?)})


;; Memories

grammar Tmem_(I) : (mem, idctxt) =
  | "(" "memory" id?:Tid? mt:Tmemtype_(I) ")" => (MEMORY mt, {MEMS (id?)})


;; Tables

grammar Ttable_(I) : (table, idctxt) =
  | "(" "table" id?:Tid? tt:Ttabletype_(I) e:Texpr_(I) ")" => (TABLE tt e, {TABLES (id?)})
  | ...

grammar Ttable_(I)/abbrev : (table, idctxt) = ...
  | "(" "table" Tid? tt:Ttabletype_(I) ")" ==
    "(" "table" Tid? tt:Ttabletype_(I) "(" "ref.null" ht:Theaptype_(I) ")" ")"
    -- if tt = at lim (REF NULL? ht)


;; Functions

grammar Tfunc_(I) : (func, idctxt) =
  | "(" "func" id?:Tid? (x,I_1):Ttypeuse_(I) ((loc*,I_2):Tlocal_(I))* e:Texpr_(I') ")" => (FUNC x $concat_(local, loc**) e, {FUNCS (id?)})
    -- if I' = I ++ I_1 ++ $concat_idctxt(I_2*)
    -- Idctxt_ok: |- I' : OK

grammar Tlocal_(I) : (local*, idctxt) =
  | "(" "local" id?:Tid? t:Tvaltype_(I) ")" => (LOCAL t, {LOCALS (id?)})
  | ...

grammar Tlocal_(I)/abbrev : (local*, idctxt) = ...
  | "(" "local" t:Tvaltype_(I)* ")" == ("(" "local" t:Tvaltype_(I) ")")*


;; Data segments

grammar Tdata_(I) : (data, idctxt) =
  | "(" "data" id?:Tid? b*:Tdatastring ")" => (DATA b* PASSIVE, {DATAS (id?)})
  | "(" "data" id?:Tid? b*:Tdatastring x:Tmemuse_(I) e:Toffset_(I) ")" => (DATA b* (ACTIVE x e), {DATAS (id?)})

grammar Tdatastring : byte* =
  | b**:Tstring* => $concat_(byte, b**)

grammar Tmemuse_(I) : memidx =
  | "(" "memory" x:Tmemidx_(I) ")" => x
  | ...

grammar Tmemuse_(I)/abbrev : memidx = ...
  | eps => 0

grammar Toffset_(I) : expr =
  | "(" "offset" e:Texpr_(I) ")" => e
  | ...

grammar Toffset_(I)/abbrev : expr = ...
  | Tfoldedinstr_(I) == "(" "offset" Tfoldedinstr_(I) ")"


;; Element segments

grammar Telem_(I) : (elem, idctxt) =
  | "(" "elem" id?:Tid? (rt,e*):Telemlist_(I) ")" => (ELEM rt e* PASSIVE, {ELEMS (id?)})
  | "(" "elem" id?:Tid? (rt,e*):Telemlist_(I) x:Ttableuse_(I) e':Toffset_(I) ")" => (ELEM rt e* (ACTIVE x e'), {ELEMS (id?)})
  | "(" "elem" id?:Tid? "declare" (rt,e*):Telemlist_(I) ")" => (ELEM rt e* DECLARE, {ELEMS (id?)})

grammar Telemlist_(I) : (reftype, expr*) =
  | rt:Treftype_(I) e*:Tlist(Texpr_(I)) => (rt, e*)
  | ...

grammar Telemlist_(I)/abbrev : (reftype, expr*) = ...
  | "func" x*:Tfuncidx_(I)* ==
    "(" "ref" "func" ")" ("(" "ref.func" Tfuncidx_(I) ")")*

grammar Telemexpr_(I) : expr =
  | "(" "item" e:Texpr_(I) ")" => e
  | ...

grammar Telemexpr_(I)/abbrev : expr = ...
  | Tfoldedinstr_(I) == "(" "item" Tfoldedinstr_(I) ")"

grammar Ttableuse_(I) : tableidx =
  | "(" "table" x:Ttableidx_(I) ")" => x
  | ...

grammar Ttableuse_(I)/abbrev : tableidx = ...
  | eps => 0


;; Start functions

grammar Tstart_(I) : (start, idctxt) =
  | "(" "start" x:Tfuncidx_(I) ")" => (START x, {})


;; Imports

grammar Timport_(I) : (import, idctxt) =
  | "(" "import" nm_1:Tname nm_2:Tname (xt,I'):Texterntype_(I) ")" => (IMPORT nm_1 nm_2 xt, I')
  | ...

grammar Timport_(I)/abbrev : (import, idctxt) = ...
  | "(" "tag" Tid? "(" "import" Tname^2 ")" Ttagtype_(I) ")" ==
    "(" "import" Tname^2 "(" "tag" Tid? Ttagtype_(I) ")" ")"
  | "(" "global" Tid? "(" "import" Tname^2 ")" Tglobaltype_(I) ")" ==
    "(" "import" Tname^2 "(" "global" Tid? Tglobaltype_(I) ")" ")"
  | "(" "memory" Tid? "(" "import" Tname^2 ")" Tmemtype_(I) ")" ==
    "(" "import" Tname^2 "(" "memory" Tid? Tmemtype_(I) ")" ")"
  | "(" "table" Tid? "(" "import" Tname^2 ")" Ttabletype_(I) ")" ==
    "(" "import" Tname^2 "(" "table" Tid? Ttabletype_(I) ")" ")"
  | "(" "func" Tid? "(" "import" Tname^2 ")" Ttypeuse_(I) ")" ==
    "(" "import" Tname^2 "(" "func" Tid? Ttypeuse_(I) ")" ")"


;; Exports

grammar Texport_(I) : (export, idctxt) =
  | "(" "export" nm:Tname xx:Texternidx_(I) ")" => (EXPORT nm xx, {})

grammar Texportdots = "(" "export" Tname ")"
grammar Timportdots = "(" "import" Tname Tname ")"

grammar Texporttagdots_(I) hint(show `...) =
  | Texportdots* Ttagtype_(I)
  | Texportdots* Timportdots Ttagtype_(I)
grammar Texportglobaldots_(I) hint(show `...) =
  | Texportdots* Tglobaltype_(I) Texpr_(I)
  | Texportdots* Timportdots Tglobaltype_(I)
grammar Texportmemorydots_(I) hint(show `...) =
  | Texportdots* Tmemtype_(I)
  | Texportdots* Taddrtype? "(" "data" Tdatastring ")"
  | Texportdots* Timportdots Tmemtype_(I)
grammar Texporttabledots_(I) hint(show `...) =
  | Texportdots* Ttabletype_(I) Texpr_(I)?
  | Texportdots* Taddrtype? Treftype_(I) "(" "elem" Telemlist_(I) ")"
  | Texportdots* Timportdots Ttabletype_(I)
grammar Texportfuncdots_(I) hint(show `...) =
  | Texportdots* Ttypeuse_(I) Tlocal_(I)* Texpr_(I)
  | Texportdots* Timportdots Ttypeuse_(I)


;; TODO(5, rossberg): make properly typed

grammar Texporttag_(I)/abbrev : () =
  | "(" "tag" id?:Tid? "(" "export" Tname ")" Texporttagdots_(I) ")" ==
    "(" "tag" id':Tid Texporttagdots_(I) ")"
    "(" "export" Tname "(" "tag" Tid ")" ")"
    ----
    -- if id? = id' \/ id? = eps /\ ~(id' <- I.TAGS)

grammar Texportglobal_(I)/abbrev : () =
  | "(" "global" id?:Tid? "(" "export" Tname ")" Texportglobaldots_(I) ")" ==
    "(" "global" id':Tid Texportglobaldots_(I) ")"
    "(" "export" Tname "(" "global" Tid ")" ")"
    ----
    -- if id? = id' \/ id? = eps /\ ~(id' <- I.GLOBALS)

grammar Texportmemory_(I)/abbrev : () =
  | "(" "memory" id?:Tid? "(" "export" Tname ")" Texportmemorydots_(I) ")" ==
    "(" "memory" id':Tid Texportmemorydots_(I) ")"
    "(" "export" Tname "(" "memory" Tid ")" ")"
    ----
    -- if id? = id' \/ id? = eps /\ ~(id' <- I.MEMS)

grammar Texporttable_(I)/abbrev : () =
  | "(" "table" id?:Tid? "(" "export" Tname ")" Texporttabledots_(I) ")" ==
    "(" "table" id':Tid Texporttabledots_(I) ")"
    "(" "export" Tname "(" "table" Tid ")" ")"
    ----
    -- if id? = id' \/ id? = eps /\ ~(id' <- I.TABLES)

grammar Texportfunc_(I)/abbrev : () =
  | "(" "func" id?:Tid? "(" "export" Tname ")" Texportfuncdots_(I) ")" ==
    "(" "func" id':Tid Texportfuncdots_(I) ")"
    "(" "export" Tname "(" "func" Tid ")" ")"
    ----
    -- if id? = id' \/ id? = eps /\ ~(id' <- I.FUNCS)


grammar Tdatamemory_(I)/abbrev : () =
  | "(" "memory" id?:Tid? at?:Taddrtype? "(" "data" b*:Tdatastring ")" ")" ==
    "(" "memory" id':Tid at?:Taddrtype? n:Tu64 n:Tu64 ")"
    "(" "data" "(" "memory" id':Tid ")" "(" at':Taddrtype ".const" "0" ")" Tdatastring ")"
    ----
    -- if id? = id' \/ id? = eps /\ ~(id' <- I.MEMS)
    -- if at? = at' \/ at? = eps /\ at' = I32
;; TODO(4, rossberg): define $ceil
;;    -- if n = $ceil($(|b*| / 64*$Ki))

grammar Telemtable_(I)/abbrev : () =
  | "(" "table" id?:Tid? at?:Taddrtype? Treftype_(I) "(" "elem" (rt,e*):Telemlist_(I) ")" ")" ==
    "(" "table" id':Tid at?:Taddrtype? n:Tu64 n:Tu64 Treftype_(I) ")"
    "(" "elem" "(" "table" id':Tid ")" "(" at':Taddrtype ".const" "0" ")" Telemlist_(I) ")"
    ----
    -- if id? = id' \/ id? = eps /\ ~(id' <- I.TABLES)
    -- if at? = at' \/ at? = eps /\ at' = I32
    -- if n = |e*|


;; Modules

syntax modulefield = type | import | tag | global | mem | table | func | data | elem | start | export

def $typesmf(modulefield*) : type*      hint(show $types(%))   hint(macro "typesmf")
def $importsmf(modulefield*) : import*  hint(show $imports(%)) hint(macro "importsmf")
def $tagsmf(modulefield*) : tag*        hint(show $tags(%))    hint(macro "tagsmf")
def $globalsmf(modulefield*) : global*  hint(show $globals(%)) hint(macro "globalsmf")
def $memsmf(modulefield*) : mem*        hint(show $mems(%))    hint(macro "memsmf")
def $tablesmf(modulefield*) : table*    hint(show $tables(%))  hint(macro "tablesmf")
def $funcsmf(modulefield*) : func*      hint(show $funcs(%))   hint(macro "funcsmf")
def $datasmf(modulefield*) : data*      hint(show $datas(%))   hint(macro "datasmf")
def $elemsmf(modulefield*) : elem*      hint(show $elems(%))   hint(macro "elemsmf")
def $startsmf(modulefield*) : start*    hint(show $starts(%))  hint(macro "startsmf")
def $exportsmf(modulefield*) : export*  hint(show $exports(%)) hint(macro "exportsmf")

def $typesmf(eps) = eps
def $typesmf(type mf*) = type $typesmf(mf*)
def $typesmf(modulefield mf*) = $typesmf(mf*)  -- otherwise

def $importsmf(eps) = eps
def $importsmf(import mf*) = import $importsmf(mf*)
def $importsmf(modulefield mf*) = $importsmf(mf*)  -- otherwise

def $tagsmf(eps) = eps
def $tagsmf(tag mf*) = tag $tagsmf(mf*)
def $tagsmf(modulefield mf*) = $tagsmf(mf*)  -- otherwise

def $globalsmf(eps) = eps
def $globalsmf(global mf*) = global $globalsmf(mf*)
def $globalsmf(modulefield mf*) = $globalsmf(mf*)  -- otherwise

def $memsmf(eps) = eps
def $memsmf(mem mf*) = mem $memsmf(mf*)
def $memsmf(modulefield mf*) = $memsmf(mf*)  -- otherwise

def $tablesmf(eps) = eps
def $tablesmf(table mf*) = table $tablesmf(mf*)
def $tablesmf(modulefield mf*) = $tablesmf(mf*)  -- otherwise

def $funcsmf(eps) = eps
def $funcsmf(func mf*) = func $funcsmf(mf*)
def $funcsmf(modulefield mf*) = $funcsmf(mf*)  -- otherwise

def $datasmf(eps) = eps
def $datasmf(data mf*) = data $datasmf(mf*)
def $datasmf(modulefield mf*) = $datasmf(mf*)  -- otherwise

def $elemsmf(eps) = eps
def $elemsmf(elem mf*) = elem $elemsmf(mf*)
def $elemsmf(modulefield mf*) = $elemsmf(mf*)  -- otherwise

def $startsmf(eps) = eps
def $startsmf(start mf*) = start $startsmf(mf*)
def $startsmf(modulefield mf*) = $startsmf(mf*)  -- otherwise

def $exportsmf(eps) = eps
def $exportsmf(export mf*) = export $exportsmf(mf*)
def $exportsmf(modulefield mf*) = $exportsmf(mf*)  -- otherwise

def $ordered(modulefield*) : bool
def $ordered(eps) = true
def $ordered(mf*) = ($importsmf(mf*) = eps)
def $ordered(mf_1* import mf_2*) =
  $importsmf(mf_1*) = eps /\ $tagsmf(mf_1*) = eps /\ $globalsmf(mf_1*) = eps /\ $memsmf(mf_1*) = eps /\ $tablesmf(mf_1*) = eps /\ $funcsmf(mf_1*) = eps


grammar Tmodulefield_(I) : (modulefield, idctxt) =
  | Ttype_(I) | Timport_(I) | Ttag_(I) | Tglobal_(I) | Tmem_(I) | Ttable_(I) | Tfunc_(I) | Tdata_(I) | Telem_(I) | Tstart_(I) | Texport_(I)


grammar Tmodule : module =
  | "(" "module" Tid? (fld,I)*:Tmodulefield_(I')* ")" =>
    MODULE type* import* tag* global* mem* table* func* data* elem* start? export*
    -- if I' = $concat_idctxt(I*)
    -- Idctxt_ok: |- I' : OK
    -- if type* = $typesmf(fld*)
    -- if import* = $importsmf(fld*)
    -- if tag* = $tagsmf(fld*)
    -- if global* = $globalsmf(fld*)
    -- if mem* = $memsmf(fld*)
    -- if table* = $tablesmf(fld*)
    -- if func* = $funcsmf(fld*)
    -- if data* = $datasmf(fld*)
    -- if elem* = $elemsmf(fld*)
    -- if start? = $startsmf(fld*)
    -- if export* = $exportsmf(fld*)
    -- if $ordered(fld*)
  | ...

grammar Tmodule/abbrev : module = ...
  | Tmodulefield_(I)* == "(" "module" Tmodulefield_(I)* ")"
